{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-document-from-prompt.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A document generation AI agent that generates a PRD, research paper, or essay from a prompt.\n *\n * - generateDocumentFromPrompt - A function that handles the document generation process.\n * - GenerateDocumentFromPromptInput - The input type for the generateDocumentFromPrompt function.\n * - GenerateDocumentFromPromptOutput - The return type for the generateDocumentFromPrompt function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateDocumentFromPromptInputSchema = z.object({\n  prompt: z.string().describe('The prompt to generate the document from.'),\n  format: z\n    .enum(['PRD', 'Research paper', 'Essay'])\n    .describe('The format of the document to generate.'),\n  prdType: z\n    .enum(['Tech', 'Non-Tech'])\n    .optional()\n    .describe('The type of PRD to generate, if the format is PRD.'),\n  topicKeywords: z.string().optional().describe('Optional topic keywords.'),\n  desiredDepth: z\n    .enum(['Quick', 'Standard', 'Deep'])\n    .describe('The desired depth of the research.'),\n  targetAudience: z.string().optional().describe('Optional target audience.'),\n  targetLength: z.string().optional().describe('Optional target length.'),\n  toneStyle: z\n    .enum(['Formal', 'Conversational', 'Academic'])\n    .describe('The tone and style of the document.'),\n  referencesStyle: z\n    .enum(['No links'])\n    .describe('The reference style of the document.'),\n});\n\nexport type GenerateDocumentFromPromptInput = z.infer<\n  typeof GenerateDocumentFromPromptInputSchema\n>;\n\nconst GenerateDocumentFromPromptOutputSchema = z.object({\n  document: z.string().describe('The generated document.'),\n  progress: z.string().describe('Progress summary of the document generation.'),\n});\n\nexport type GenerateDocumentFromPromptOutput = z.infer<\n  typeof GenerateDocumentFromPromptOutputSchema\n>;\n\nexport async function generateDocumentFromPrompt(\n  input: GenerateDocumentFromPromptInput\n): Promise<GenerateDocumentFromPromptOutput> {\n  return generateDocumentFromPromptFlow(input);\n}\n\nconst prdPromptTemplate = `You are an expert product manager. Generate a comprehensive, industry-standard Product Requirements Document (PRD) based on the user's prompt. The output must be clean text, using line breaks for structure instead of markdown.\n\nYour response MUST follow this exact 16-point format and include all headings:\n\n1.  **Document Control**\n    -   Version: 1.0\n    -   Date: (Today's Date)\n    -   Author: AI Product Manager\n    -   Approvers: [Stakeholder Name/Title]\n\n2.  **Introduction**\n    -   Product Name: [Infer from prompt or create a suitable name]\n    -   Brief Description: [A one-sentence summary of the product]\n    -   Background / Context: [Explain why this product is being considered now]\n    -   Vision & Mission: [State the long-term vision and immediate mission]\n\n3.  **Objectives & Goals**\n    -   Business Goals: [e.g., Increase market share, generate new revenue stream]\n    -   User Goals: [What users will achieve with this product]\n    -   Success Metrics / KPIs: [Quantifiable metrics, e.g., 20% increase in user engagement]\n\n4.  **Problem Statement**\n    -   The core problem being solved: [Clearly define the user/market problem]\n    -   Current gaps or pain points: [Describe existing inefficient solutions]\n    -   Target audience: [Who is this for?]\n\n5.  **Scope**\n    -   In-Scope Features: [List key features for the initial release]\n    -   Out-of-Scope Items: [List features to be considered for future releases]\n    -   Assumptions & Dependencies: [e.g., Assumes availability of a specific API]\n\n6.  **User Personas**\n    -   [Persona 1 Name]: [Description, needs, motivations, pain points]\n    -   [Persona 2 Name]: [Description, needs, motivations, pain points]\n\n7.  **User Stories & Use Cases**\n    -   [User Story 1]: \"As a [persona], I want to [action], so that [benefit].\"\n    -   Acceptance Criteria: [Bulleted list of conditions for the story to be 'done']\n    -   [User Story 2]: \"As a [persona], I want to [action], so that [benefit].\"\n    -   Acceptance Criteria: [Bulleted list of conditions for the story to be 'done']\n\n8.  **Functional Requirements**\n    -   [FR-001] [Feature Name] (Priority: Must Have/Should Have/Nice to Have) - [Detailed Description]\n    -   [FR-002] [Feature Name] (Priority: Must Have/Should Have/Nice to Have) - [Detailed Description]\n\n9.  **Non-Functional Requirements**\n    -   Performance: [e.g., Page loads under 2 seconds]\n    -   Security: [e.g., Adherence to OWASP Top 10, data encryption]\n    -   Scalability: [e.g., Support 10,000 concurrent users]\n    -   Compliance: [e.g., GDPR, CCPA]\n    -   UX/UI guidelines: [e.g., Adherence to company design system]\n\n10. **User Flows & Journey Maps**\n    -   [User Flow 1 Name, e.g., Onboarding]: [Step-by-step description of the user's path]\n\n11. **Technical Requirements**\n    -   Platforms: [e.g., Web (responsive), iOS, Android]\n    -   Integrations / APIs: [e.g., Stripe for payments, Google Maps for location]\n    -   Data storage: [e.g., Firestore for user data, Cloud Storage for files]\n    -   Architecture overview: [Briefly describe the proposed technical architecture]\n\n12. **Design & Wireframes (optional)**\n    -   [This section notes that UI mockups and wireframes will be attached separately or linked here.]\n\n13. **Constraints & Risks**\n    -   Technical constraints: [e.g., Limited access to a specific dataset]\n    -   Business risks: [e.g., Market competition, potential for low adoption]\n    -   Mitigation strategies: [How to address the identified risks]\n\n14. **Timeline & Roadmap**\n    -   Milestones: [Key checkpoints, e.g., Design complete, Alpha version ready]\n    -   Phases: [MVP, V1.0, Future releases]\n\n15. **Analytics & Tracking**\n    -   Metrics to track: [e.g., Daily Active Users, Feature Adoption Rate, Conversion Funnel]\n    -   Tools to be used: [e.g., Google Analytics, Mixpanel]\n\n16. **Open Questions**\n    -   [List any pending decisions or items requiring stakeholder input.]\n\nFill each section with maximum clarity, precision, and depth based on the user's prompt.\n---\nUser Prompt: {{{prompt}}}\nTopic Keywords: {{{topicKeywords}}}\nTarget Audience: {{{targetAudience}}}\nDesired Depth: {{{desiredDepth}}}\nTone and Style: {{{toneStyle}}}\n---\n`;\n\nconst generateDocumentFromPromptFlow = ai.defineFlow(\n  {\n    name: 'generateDocumentFromPromptFlow',\n    inputSchema: GenerateDocumentFromPromptInputSchema,\n    outputSchema: GenerateDocumentFromPromptOutputSchema,\n  },\n  async input => {\n    let promptText = '';\n\n    if (input.format === 'PRD') {\n      promptText = prdPromptTemplate\n        .replace('{{{prompt}}}', input.prompt)\n        .replace('{{{topicKeywords}}}', input.topicKeywords || 'N/A')\n        .replace('{{{targetAudience}}}', input.targetAudience || 'N/A')\n        .replace('{{{desiredDepth}}}', input.desiredDepth)\n        .replace('{{{toneStyle}}}', input.toneStyle)\n        .replace(\"(Today's Date)\", new Date().toLocaleDateString());\n    } else {\n      promptText = `You are an AI research assistant that generates documents from prompts.\n\n      The output should be clean text, without any markdown symbols like '#' or '*'. Use line breaks for structure.\n\n      Generate a document in the following format: ${input.format}.`;\n\n      if (input.prdType) {\n        promptText += `\\nThis is a ${input.prdType} PRD.`;\n        if (input.prdType === 'Tech') {\n          promptText += `\\nWhen generating a Tech PRD, ensure the document is very lengthy, well-structured, and includes a detailed \"Tech Stack\" section.`;\n        }\n      }\n\n      promptText += `\\n\\nPrompt: ${input.prompt}`;\n\n      if (input.topicKeywords) {\n        promptText += `\\nTopic Keywords: ${input.topicKeywords}`;\n      }\n\n      promptText += `\\nDesired Depth: ${input.desiredDepth}`;\n\n      if (input.targetAudience) {\n        promptText += `\\nTarget Audience: ${input.targetAudience}`;\n      }\n\n      if (input.targetLength) {\n        promptText += `\\nTarget Length: ${input.targetLength}`;\n      }\n\n      promptText += `\\nTone and Style: ${input.toneStyle}`;\n      promptText += `\\nReferences Style: ${input.referencesStyle}`;\n      promptText += `\\n\\nThe document should be well-structured and easy to read.`;\n    }\n    \n    promptText += `\\n\\nInclude a short, one-sentence summary of what you have generated to the 'progress' field in the output.`;\n\n\n    const {output} = await ai.generate({\n      prompt: promptText,\n      output: { schema: GenerateDocumentFromPromptOutputSchema },\n    });\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,QAAQ,uIAAA,CAAA,IAAC,CACN,IAAI,CAAC;QAAC;QAAO;QAAkB;KAAQ,EACvC,QAAQ,CAAC;IACZ,SAAS,uIAAA,CAAA,IAAC,CACP,IAAI,CAAC;QAAC;QAAQ;KAAW,EACzB,QAAQ,GACR,QAAQ,CAAC;IACZ,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,cAAc,uIAAA,CAAA,IAAC,CACZ,IAAI,CAAC;QAAC;QAAS;QAAY;KAAO,EAClC,QAAQ,CAAC;IACZ,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C,WAAW,uIAAA,CAAA,IAAC,CACT,IAAI,CAAC;QAAC;QAAU;QAAkB;KAAW,EAC7C,QAAQ,CAAC;IACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,IAAI,CAAC;QAAC;KAAW,EACjB,QAAQ,CAAC;AACd;AAMA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAMO,eAAe,2BACpB,KAAsC;IAEtC,OAAO,+BAA+B;AACxC;AAEA,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwF3B,CAAC;AAED,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,IAAI,aAAa;IAEjB,IAAI,MAAM,MAAM,KAAK,OAAO;QAC1B,aAAa,kBACV,OAAO,CAAC,gBAAgB,MAAM,MAAM,EACpC,OAAO,CAAC,uBAAuB,MAAM,aAAa,IAAI,OACtD,OAAO,CAAC,wBAAwB,MAAM,cAAc,IAAI,OACxD,OAAO,CAAC,sBAAsB,MAAM,YAAY,EAChD,OAAO,CAAC,mBAAmB,MAAM,SAAS,EAC1C,OAAO,CAAC,kBAAkB,IAAI,OAAO,kBAAkB;IAC5D,OAAO;QACL,aAAa,CAAC;;;;mDAI+B,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC;QAE9D,IAAI,MAAM,OAAO,EAAE;YACjB,cAAc,CAAC,YAAY,EAAE,MAAM,OAAO,CAAC,KAAK,CAAC;YACjD,IAAI,MAAM,OAAO,KAAK,QAAQ;gBAC5B,cAAc,CAAC,iIAAiI,CAAC;YACnJ;QACF;QAEA,cAAc,CAAC,YAAY,EAAE,MAAM,MAAM,EAAE;QAE3C,IAAI,MAAM,aAAa,EAAE;YACvB,cAAc,CAAC,kBAAkB,EAAE,MAAM,aAAa,EAAE;QAC1D;QAEA,cAAc,CAAC,iBAAiB,EAAE,MAAM,YAAY,EAAE;QAEtD,IAAI,MAAM,cAAc,EAAE;YACxB,cAAc,CAAC,mBAAmB,EAAE,MAAM,cAAc,EAAE;QAC5D;QAEA,IAAI,MAAM,YAAY,EAAE;YACtB,cAAc,CAAC,iBAAiB,EAAE,MAAM,YAAY,EAAE;QACxD;QAEA,cAAc,CAAC,kBAAkB,EAAE,MAAM,SAAS,EAAE;QACpD,cAAc,CAAC,oBAAoB,EAAE,MAAM,eAAe,EAAE;QAC5D,cAAc,CAAC,4DAA4D,CAAC;IAC9E;IAEA,cAAc,CAAC,2GAA2G,CAAC;IAG3H,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACjC,QAAQ;QACR,QAAQ;YAAE,QAAQ;QAAuC;IAC3D;IACA,OAAO;AACT;;;IA5JoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/config.ts"],"sourcesContent":["export const firebaseConfig = {\n  \"projectId\": \"studio-430250886-afaff\",\n  \"appId\": \"1:182313377017:web:37c2cc9b4faf796bd29628\",\n  \"apiKey\": \"AIzaSyCiemo78XLrRVMXY7bXDu6Ok6IzxPOqFUA\",\n  \"authDomain\": \"studio-430250886-afaff.firebaseapp.com\",\n  \"measurementId\": \"\",\n  \"messagingSenderId\": \"182313377017\"\n};\n"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB;IAC5B,aAAa;IACb,SAAS;IACT,UAAU;IACV,cAAc;IACd,iBAAiB;IACjB,qBAAqB;AACvB","debugId":null}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/firebase/server.ts"],"sourcesContent":["\nimport { initializeApp, getApp, getApps, App } from 'firebase-admin/app';\nimport { firebaseConfig } from './config';\n\nlet adminApp: App;\n\nif (typeof window !== 'undefined') {\n  throw new Error('Firebase Admin SDK can only be used on the server.');\n}\n\nexport function getAdminApp(): App {\n  if (getApps().some(app => app.name === 'admin')) {\n    return getApp('admin');\n  }\n\n  try {\n    // First, try to initialize using Application Default Credentials\n    // This is the recommended way for server environments like Cloud Run\n    adminApp = initializeApp({ projectId: firebaseConfig.projectId }, 'admin');\n  } catch (e) {\n    console.warn('Admin SDK initialization with default credentials failed, falling back to service account. Error:', e);\n    // Fallback for local development or environments without ADC\n    // Ensure you have the service account key file configured via environment variables\n    const serviceAccount = process.env.FIREBASE_SERVICE_ACCOUNT\n      ? JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT)\n      : undefined;\n\n    if (!serviceAccount) {\n      throw new Error(\n        'Firebase Admin SDK initialization failed. Missing FIREBASE_SERVICE_ACCOUNT environment variable.'\n      );\n    }\n\n    adminApp = initializeApp({\n      credential: {\n        projectId: serviceAccount.project_id,\n        clientEmail: serviceAccount.client_email,\n        privateKey: serviceAccount.private_key.replace(/\\\\n/g, '\\n'),\n      },\n      databaseURL: `https://${firebaseConfig.projectId}.firebaseio.com`\n    }, 'admin');\n  }\n\n  return adminApp;\n}\n"],"names":[],"mappings":";;;AACA;AACA;;;;;;;AAEA,IAAI;AAEJ,uCAAmC;;AAEnC;AAEO,SAAS;IACd,IAAI,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,KAAK,UAAU;QAC/C,OAAO,CAAA,GAAA,gJAAA,CAAA,SAAM,AAAD,EAAE;IAChB;IAEA,IAAI;QACF,iEAAiE;QACjE,qEAAqE;QACrE,WAAW,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD,EAAE;YAAE,WAAW,yHAAA,CAAA,iBAAc,CAAC,SAAS;QAAC,GAAG;IACpE,EAAE,OAAO,GAAG;QACV,QAAQ,IAAI,CAAC,qGAAqG;QAClH,6DAA6D;QAC7D,oFAAoF;QACpF,MAAM,iBAAiB,QAAQ,GAAG,CAAC,wBAAwB,GACvD,KAAK,KAAK,CAAC,QAAQ,GAAG,CAAC,wBAAwB,IAC/C;QAEJ,IAAI,CAAC,gBAAgB;YACnB,MAAM,IAAI,MACR;QAEJ;QAEA,WAAW,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD,EAAE;YACvB,YAAY;gBACV,WAAW,eAAe,UAAU;gBACpC,aAAa,eAAe,YAAY;gBACxC,YAAY,eAAe,WAAW,CAAC,OAAO,CAAC,QAAQ;YACzD;YACA,aAAa,CAAC,QAAQ,EAAE,yHAAA,CAAA,iBAAc,CAAC,SAAS,CAAC,eAAe,CAAC;QACnE,GAAG;IACL;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  generateDocumentFromPrompt,\n  type GenerateDocumentFromPromptInput,\n  type GenerateDocumentFromPromptOutput,\n} from '@/ai/flows/generate-document-from-prompt';\nimport { getAdminApp } from '@/firebase/server';\nimport { getFirestore } from 'firebase-admin/firestore';\n\nexport async function handleGeneration(\n  input: GenerateDocumentFromPromptInput & { userId: string }\n): Promise<{ success: boolean; data?: GenerateDocumentFromPromptOutput & { documentId: string }; error?: string }> {\n  const { userId, ...promptInput } = input;\n  if (!userId) {\n    return { success: false, error: 'User is not authenticated.' };\n  }\n\n  try {\n    // Add a slight delay to allow progress indicators to show\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const result = await generateDocumentFromPrompt(promptInput);\n\n    // Save prompt and generated document to history on successful generation\n    try {\n      const adminApp = getAdminApp();\n      const firestore = getFirestore(adminApp);\n      const userRef = firestore.collection('users').doc(userId);\n      \n      const promptRef = userRef.collection('prompts').doc();\n      await promptRef.set({\n        ...promptInput,\n        createdAt: new Date().toISOString(),\n        id: promptRef.id,\n      });\n\n      const docRef = userRef.collection('generatedDocuments').doc();\n      await docRef.set({\n        id: docRef.id,\n        promptId: promptRef.id,\n        userId: userId,\n        documentName: promptInput.prompt.substring(0, 50), // Use start of prompt as name\n        documentContent: result.document,\n        format: promptInput.format,\n        timestamp: new Date().toISOString(),\n      });\n      \n      return { success: true, data: { ...result, documentId: docRef.id } };\n\n    } catch (dbError) {\n      console.error('Failed to save document to history:', dbError);\n      // We don't fail the whole operation if history saving fails, but we could add more robust logging.\n       return { success: true, data: { ...result, documentId: '' } }; // Proceed without a doc id\n    }\n\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to generate document: ${errorMessage}` };\n  }\n}\n\nexport async function deleteDocument(userId: string, documentId: string): Promise<{success: boolean, error?: string}> {\n    if (!userId) {\n        return { success: false, error: 'User is not authenticated.' };\n    }\n    if (!documentId) {\n        return { success: false, error: 'Document ID is missing.' };\n    }\n\n    try {\n        const adminApp = getAdminApp();\n        const firestore = getFirestore(adminApp);\n        await firestore.collection('users').doc(userId).collection('generatedDocuments').doc(documentId).delete();\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to delete document:', error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete document: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":";;;;;;AAGA;AAKA;AACA;;;;;;;;;;;;AAEO,eAAe,iBACpB,KAA2D;IAE3D,MAAM,EAAE,MAAM,EAAE,GAAG,aAAa,GAAG;IACnC,IAAI,CAAC,QAAQ;QACX,OAAO;YAAE,SAAS;YAAO,OAAO;QAA6B;IAC/D;IAEA,IAAI;QACF,0DAA0D;QAC1D,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QACjD,MAAM,SAAS,MAAM,CAAA,GAAA,4JAAA,CAAA,6BAA0B,AAAD,EAAE;QAEhD,yEAAyE;QACzE,IAAI;YACF,MAAM,WAAW,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD;YAC3B,MAAM,YAAY,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD,EAAE;YAC/B,MAAM,UAAU,UAAU,UAAU,CAAC,SAAS,GAAG,CAAC;YAElD,MAAM,YAAY,QAAQ,UAAU,CAAC,WAAW,GAAG;YACnD,MAAM,UAAU,GAAG,CAAC;gBAClB,GAAG,WAAW;gBACd,WAAW,IAAI,OAAO,WAAW;gBACjC,IAAI,UAAU,EAAE;YAClB;YAEA,MAAM,SAAS,QAAQ,UAAU,CAAC,sBAAsB,GAAG;YAC3D,MAAM,OAAO,GAAG,CAAC;gBACf,IAAI,OAAO,EAAE;gBACb,UAAU,UAAU,EAAE;gBACtB,QAAQ;gBACR,cAAc,YAAY,MAAM,CAAC,SAAS,CAAC,GAAG;gBAC9C,iBAAiB,OAAO,QAAQ;gBAChC,QAAQ,YAAY,MAAM;gBAC1B,WAAW,IAAI,OAAO,WAAW;YACnC;YAEA,OAAO;gBAAE,SAAS;gBAAM,MAAM;oBAAE,GAAG,MAAM;oBAAE,YAAY,OAAO,EAAE;gBAAC;YAAE;QAErE,EAAE,OAAO,SAAS;YAChB,QAAQ,KAAK,CAAC,uCAAuC;YACrD,mGAAmG;YAClG,OAAO;gBAAE,SAAS;gBAAM,MAAM;oBAAE,GAAG,MAAM;oBAAE,YAAY;gBAAG;YAAE,GAAG,2BAA2B;QAC7F;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,6BAA6B,EAAE,cAAc;QAAC;IACjF;AACF;AAEO,eAAe,eAAe,MAAc,EAAE,UAAkB;IACnE,IAAI,CAAC,QAAQ;QACT,OAAO;YAAE,SAAS;YAAO,OAAO;QAA6B;IACjE;IACA,IAAI,CAAC,YAAY;QACb,OAAO;YAAE,SAAS;YAAO,OAAO;QAA0B;IAC9D;IAEA,IAAI;QACA,MAAM,WAAW,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD;QAC3B,MAAM,YAAY,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD,EAAE;QAC/B,MAAM,UAAU,UAAU,CAAC,SAAS,GAAG,CAAC,QAAQ,UAAU,CAAC,sBAAsB,GAAG,CAAC,YAAY,MAAM;QACvG,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,2BAA2B,EAAE,cAAc;QAAC;IACjF;AACJ;;;IAtEsB;IAoDA;;AApDA,+OAAA;AAoDA,+OAAA","debugId":null}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/history/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {deleteDocument as '60456e16206c2db5351e4cd337d0172b20894ef0a8'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 734, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/history/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/history/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/history/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 748, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/history/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/history/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/history/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 762, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}