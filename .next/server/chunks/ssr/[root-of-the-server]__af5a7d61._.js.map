{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///E:/PROJECTS/ai%20projects/scientisto/Scientisto-/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.5-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///E:/PROJECTS/ai%20projects/scientisto/Scientisto-/src/ai/flows/generate-document-from-prompt.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A document generation AI agent that generates a PRD, research paper, or essay from a prompt.\r\n *\r\n * - generateDocumentFromPrompt - A function that handles the document generation process.\r\n * - GenerateDocumentFromPromptInput - The input type for the generateDocumentFromPrompt function.\r\n * - GenerateDocumentFromPromptOutput - The return type for the generateDocumentFromPrompt function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateDocumentFromPromptInputSchema = z.object({\r\n  prompt: z.string().describe('The prompt to generate the document from.'),\r\n  format: z\r\n    .enum(['PRD', 'Research paper', 'Essay'])\r\n    .describe('The format of the document to generate.'),\r\n  prdType: z\r\n    .enum(['Tech', 'Non-Tech'])\r\n    .optional()\r\n    .describe('The type of PRD to generate, if the format is PRD.'),\r\n  topicKeywords: z.string().optional().describe('Optional topic keywords.'),\r\n  desiredDepth: z\r\n    .enum(['Quick', 'Standard', 'Deep'])\r\n    .describe('The desired depth of the research.'),\r\n  targetAudience: z.string().optional().describe('Optional target audience.'),\r\n  targetLength: z.string().optional().describe('Optional target length.'),\r\n  toneStyle: z\r\n    .enum(['Formal', 'Conversational', 'Academic'])\r\n    .describe('The tone and style of the document.'),\r\n  referencesStyle: z\r\n    .enum(['No links'])\r\n    .describe('The reference style of the document.'),\r\n});\r\n\r\nexport type GenerateDocumentFromPromptInput = z.infer<\r\n  typeof GenerateDocumentFromPromptInputSchema\r\n>;\r\n\r\nconst GenerateDocumentFromPromptOutputSchema = z.object({\r\n  document: z.string().describe('The generated document.'),\r\n  progress: z.string().describe('Progress summary of the document generation.'),\r\n});\r\n\r\nexport type GenerateDocumentFromPromptOutput = z.infer<\r\n  typeof GenerateDocumentFromPromptOutputSchema\r\n>;\r\n\r\nexport async function generateDocumentFromPrompt(\r\n  input: GenerateDocumentFromPromptInput\r\n): Promise<GenerateDocumentFromPromptOutput> {\r\n  return generateDocumentFromPromptFlow(input);\r\n}\r\n\r\nconst prdPromptTemplate = `You are an expert product manager. Generate a comprehensive, industry-standard Product Requirements Document (PRD) based on the user's prompt. The output must be clean text, using line breaks for structure instead of markdown.\r\n\r\nYour response MUST follow this exact 16-point format and include all headings:\r\n\r\n1.  **Document Control**\r\n    -   Version: 1.0\r\n    -   Date: (Today's Date)\r\n    -   Author: AI Product Manager\r\n    -   Approvers: [Stakeholder Name/Title]\r\n\r\n2.  **Introduction**\r\n    -   Product Name: [Infer from prompt or create a suitable name]\r\n    -   Brief Description: [A one-sentence summary of the product]\r\n    -   Background / Context: [Explain why this product is being considered now]\r\n    -   Vision & Mission: [State the long-term vision and immediate mission]\r\n\r\n3.  **Objectives & Goals**\r\n    -   Business Goals: [e.g., Increase market share, generate new revenue stream]\r\n    -   User Goals: [What users will achieve with this product]\r\n    -   Success Metrics / KPIs: [Quantifiable metrics, e.g., 20% increase in user engagement]\r\n\r\n4.  **Problem Statement**\r\n    -   The core problem being solved: [Clearly define the user/market problem]\r\n    -   Current gaps or pain points: [Describe existing inefficient solutions]\r\n    -   Target audience: [Who is this for?]\r\n\r\n5.  **Scope**\r\n    -   In-Scope Features: [List key features for the initial release]\r\n    -   Out-of-Scope Items: [List features to be considered for future releases]\r\n    -   Assumptions & Dependencies: [e.g., Assumes availability of a specific API]\r\n\r\n6.  **User Personas**\r\n    -   [Persona 1 Name]: [Description, needs, motivations, pain points]\r\n    -   [Persona 2 Name]: [Description, needs, motivations, pain points]\r\n\r\n7.  **User Stories & Use Cases**\r\n    -   [User Story 1]: \"As a [persona], I want to [action], so that [benefit].\"\r\n    -   Acceptance Criteria: [Bulleted list of conditions for the story to be 'done']\r\n    -   [User Story 2]: \"As a [persona], I want to [action], so that [benefit].\"\r\n    -   Acceptance Criteria: [Bulleted list of conditions for the story to be 'done']\r\n\r\n8.  **Functional Requirements**\r\n    -   [FR-001] [Feature Name] (Priority: Must Have/Should Have/Nice to Have) - [Detailed Description]\r\n    -   [FR-002] [Feature Name] (Priority: Must Have/Should Have/Nice to Have) - [Detailed Description]\r\n\r\n9.  **Non-Functional Requirements**\r\n    -   Performance: [e.g., Page loads under 2 seconds]\r\n    -   Security: [e.g., Adherence to OWASP Top 10, data encryption]\r\n    -   Scalability: [e.g., Support 10,000 concurrent users]\r\n    -   Compliance: [e.g., GDPR, CCPA]\r\n    -   UX/UI guidelines: [e.g., Adherence to company design system]\r\n\r\n10. **User Flows & Journey Maps**\r\n    -   [User Flow 1 Name, e.g., Onboarding]: [Step-by-step description of the user's path]\r\n\r\n11. **Technical Requirements**\r\n    -   Platforms: [e.g., Web (responsive), iOS, Android]\r\n    -   Integrations / APIs: [e.g., Stripe for payments, Google Maps for location]\r\n    -   Data storage: [e.g., Firestore for user data, Cloud Storage for files]\r\n    -   Architecture overview: [Briefly describe the proposed technical architecture]\r\n\r\n12. **Design & Wireframes (optional)**\r\n    -   [This section notes that UI mockups and wireframes will be attached separately or linked here.]\r\n\r\n13. **Constraints & Risks**\r\n    -   Technical constraints: [e.g., Limited access to a specific dataset]\r\n    -   Business risks: [e.g., Market competition, potential for low adoption]\r\n    -   Mitigation strategies: [How to address the identified risks]\r\n\r\n14. **Timeline & Roadmap**\r\n    -   Milestones: [Key checkpoints, e.g., Design complete, Alpha version ready]\r\n    -   Phases: [MVP, V1.0, Future releases]\r\n\r\n15. **Analytics & Tracking**\r\n    -   Metrics to track: [e.g., Daily Active Users, Feature Adoption Rate, Conversion Funnel]\r\n    -   Tools to be used: [e.g., Google Analytics, Mixpanel]\r\n\r\n16. **Open Questions**\r\n    -   [List any pending decisions or items requiring stakeholder input.]\r\n\r\nFill each section with maximum clarity, precision, and depth based on the user's prompt.\r\n---\r\nUser Prompt: {{{prompt}}}\r\nTopic Keywords: {{{topicKeywords}}}\r\nTarget Audience: {{{targetAudience}}}\r\nDesired Depth: {{{desiredDepth}}}\r\nTone and Style: {{{toneStyle}}}\r\n---\r\n`;\r\n\r\nconst generateDocumentFromPromptFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateDocumentFromPromptFlow',\r\n    inputSchema: GenerateDocumentFromPromptInputSchema,\r\n    outputSchema: GenerateDocumentFromPromptOutputSchema,\r\n  },\r\n  async input => {\r\n    let promptText = '';\r\n\r\n    if (input.format === 'PRD') {\r\n      promptText = prdPromptTemplate\r\n        .replace('{{{prompt}}}', input.prompt)\r\n        .replace('{{{topicKeywords}}}', input.topicKeywords || 'N/A')\r\n        .replace('{{{targetAudience}}}', input.targetAudience || 'N/A')\r\n        .replace('{{{desiredDepth}}}', input.desiredDepth)\r\n        .replace('{{{toneStyle}}}', input.toneStyle)\r\n        .replace(\"(Today's Date)\", new Date().toLocaleDateString());\r\n    } else {\r\n      promptText = `You are an AI research assistant that generates documents from prompts.\r\n\r\n      The output should be clean text, without any markdown symbols like '#' or '*'. Use line breaks for structure.\r\n\r\n      Generate a document in the following format: ${input.format}.`;\r\n\r\n      if (input.prdType) {\r\n        promptText += `\\nThis is a ${input.prdType} PRD.`;\r\n        if (input.prdType === 'Tech') {\r\n          promptText += `\\nWhen generating a Tech PRD, ensure the document is very lengthy, well-structured, and includes a detailed \"Tech Stack\" section.`;\r\n        }\r\n      }\r\n\r\n      promptText += `\\n\\nPrompt: ${input.prompt}`;\r\n\r\n      if (input.topicKeywords) {\r\n        promptText += `\\nTopic Keywords: ${input.topicKeywords}`;\r\n      }\r\n\r\n      promptText += `\\nDesired Depth: ${input.desiredDepth}`;\r\n\r\n      if (input.targetAudience) {\r\n        promptText += `\\nTarget Audience: ${input.targetAudience}`;\r\n      }\r\n\r\n      if (input.targetLength) {\r\n        promptText += `\\nTarget Length: ${input.targetLength}`;\r\n      }\r\n\r\n      promptText += `\\nTone and Style: ${input.toneStyle}`;\r\n      promptText += `\\nReferences Style: ${input.referencesStyle}`;\r\n      promptText += `\\n\\nThe document should be well-structured and easy to read.`;\r\n    }\r\n    \r\n    promptText += `\\n\\nInclude a short, one-sentence summary of what you have generated to the 'progress' field in the output.`;\r\n\r\n\r\n    const {output} = await ai.generate({\r\n      prompt: promptText,\r\n      output: { schema: GenerateDocumentFromPromptOutputSchema },\r\n    });\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,QAAQ,uIAAA,CAAA,IAAC,CACN,IAAI,CAAC;QAAC;QAAO;QAAkB;KAAQ,EACvC,QAAQ,CAAC;IACZ,SAAS,uIAAA,CAAA,IAAC,CACP,IAAI,CAAC;QAAC;QAAQ;KAAW,EACzB,QAAQ,GACR,QAAQ,CAAC;IACZ,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,cAAc,uIAAA,CAAA,IAAC,CACZ,IAAI,CAAC;QAAC;QAAS;QAAY;KAAO,EAClC,QAAQ,CAAC;IACZ,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C,WAAW,uIAAA,CAAA,IAAC,CACT,IAAI,CAAC;QAAC;QAAU;QAAkB;KAAW,EAC7C,QAAQ,CAAC;IACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,IAAI,CAAC;QAAC;KAAW,EACjB,QAAQ,CAAC;AACd;AAMA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAMO,eAAe,2BACpB,KAAsC;IAEtC,OAAO,+BAA+B;AACxC;AAEA,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwF3B,CAAC;AAED,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,IAAI,aAAa;IAEjB,IAAI,MAAM,MAAM,KAAK,OAAO;QAC1B,aAAa,kBACV,OAAO,CAAC,gBAAgB,MAAM,MAAM,EACpC,OAAO,CAAC,uBAAuB,MAAM,aAAa,IAAI,OACtD,OAAO,CAAC,wBAAwB,MAAM,cAAc,IAAI,OACxD,OAAO,CAAC,sBAAsB,MAAM,YAAY,EAChD,OAAO,CAAC,mBAAmB,MAAM,SAAS,EAC1C,OAAO,CAAC,kBAAkB,IAAI,OAAO,kBAAkB;IAC5D,OAAO;QACL,aAAa,CAAC;;;;mDAI+B,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC;QAE9D,IAAI,MAAM,OAAO,EAAE;YACjB,cAAc,CAAC,YAAY,EAAE,MAAM,OAAO,CAAC,KAAK,CAAC;YACjD,IAAI,MAAM,OAAO,KAAK,QAAQ;gBAC5B,cAAc,CAAC,iIAAiI,CAAC;YACnJ;QACF;QAEA,cAAc,CAAC,YAAY,EAAE,MAAM,MAAM,EAAE;QAE3C,IAAI,MAAM,aAAa,EAAE;YACvB,cAAc,CAAC,kBAAkB,EAAE,MAAM,aAAa,EAAE;QAC1D;QAEA,cAAc,CAAC,iBAAiB,EAAE,MAAM,YAAY,EAAE;QAEtD,IAAI,MAAM,cAAc,EAAE;YACxB,cAAc,CAAC,mBAAmB,EAAE,MAAM,cAAc,EAAE;QAC5D;QAEA,IAAI,MAAM,YAAY,EAAE;YACtB,cAAc,CAAC,iBAAiB,EAAE,MAAM,YAAY,EAAE;QACxD;QAEA,cAAc,CAAC,kBAAkB,EAAE,MAAM,SAAS,EAAE;QACpD,cAAc,CAAC,oBAAoB,EAAE,MAAM,eAAe,EAAE;QAC5D,cAAc,CAAC,4DAA4D,CAAC;IAC9E;IAEA,cAAc,CAAC,2GAA2G,CAAC;IAG3H,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACjC,QAAQ;QACR,QAAQ;YAAE,QAAQ;QAAuC;IAC3D;IACA,OAAO;AACT;;;IA5JoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///E:/PROJECTS/ai%20projects/scientisto/Scientisto-/src/app/actions.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport {\r\n  generateDocumentFromPrompt,\r\n  type GenerateDocumentFromPromptInput,\r\n  type GenerateDocumentFromPromptOutput,\r\n} from '@/ai/flows/generate-document-from-prompt';\r\nimport { initializeFirebase } from '@/firebase';\r\nimport { collection, doc, setDoc } from 'firebase/firestore';\r\n\r\nexport async function handleGeneration(\r\n  input: GenerateDocumentFromPromptInput & { userId: string }\r\n): Promise<{ success: boolean; data?: GenerateDocumentFromPromptOutput & { documentId: string }; error?: string }> {\r\n  const { userId, ...promptInput } = input;\r\n  if (!userId) {\r\n    return { success: false, error: 'User is not authenticated.' };\r\n  }\r\n\r\n  try {\r\n    // Add a slight delay to allow progress indicators to show\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    const result = await generateDocumentFromPrompt(promptInput);\r\n\r\n    // Save prompt and generated document to history on successful generation\r\n    try {\r\n      // Use the client SDK for Firestore operations in Server Actions\r\n      const { firestore } = initializeFirebase(); \r\n      const userPromptsCol = collection(firestore, 'users', userId, 'prompts');\r\n      const promptRef = doc(userPromptsCol);\r\n\r\n      // Use non-blocking setDoc\r\n      setDoc(promptRef, {\r\n        ...promptInput,\r\n        createdAt: new Date().toISOString(),\r\n        id: promptRef.id,\r\n      });\r\n\r\n      const userDocsCol = collection(firestore, 'users', userId, 'generatedDocuments');\r\n      const docRef = doc(userDocsCol);\r\n      \r\n      // Use non-blocking setDoc\r\n      setDoc(docRef, {\r\n        id: docRef.id,\r\n        promptId: promptRef.id,\r\n        userId: userId,\r\n        documentName: promptInput.prompt.substring(0, 50), // Use start of prompt as name\r\n        documentContent: result.document,\r\n        format: promptInput.format,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      \r\n      return { success: true, data: { ...result, documentId: docRef.id } };\r\n\r\n    } catch (dbError: any) {\r\n      console.error('Failed to save document to history:', dbError);\r\n      // We don't fail the whole operation if history saving fails, but we could add more robust logging.\r\n      const errorMessage = dbError.message || 'Could not save to history.';\r\n      // Still return success, but log the specific DB error.\r\n      return { success: true, data: { ...result, documentId: '' } }; \r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(error);\r\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\r\n    return { success: false, error: `Failed to generate document: ${errorMessage}` };\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;AAGA;AAKA;AACA;AAAA;;;;;;;AAEO,eAAe,iBACpB,KAA2D;IAE3D,MAAM,EAAE,MAAM,EAAE,GAAG,aAAa,GAAG;IACnC,IAAI,CAAC,QAAQ;QACX,OAAO;YAAE,SAAS;YAAO,OAAO;QAA6B;IAC/D;IAEA,IAAI;QACF,0DAA0D;QAC1D,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QACjD,MAAM,SAAS,MAAM,CAAA,GAAA,4JAAA,CAAA,6BAA0B,AAAD,EAAE;QAEhD,yEAAyE;QACzE,IAAI;YACF,gEAAgE;YAChE,MAAM,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,wHAAA,CAAA,qBAAkB,AAAD;YACvC,MAAM,iBAAiB,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,WAAW,SAAS,QAAQ;YAC9D,MAAM,YAAY,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE;YAEtB,0BAA0B;YAC1B,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,WAAW;gBAChB,GAAG,WAAW;gBACd,WAAW,IAAI,OAAO,WAAW;gBACjC,IAAI,UAAU,EAAE;YAClB;YAEA,MAAM,cAAc,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,WAAW,SAAS,QAAQ;YAC3D,MAAM,SAAS,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE;YAEnB,0BAA0B;YAC1B,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,QAAQ;gBACb,IAAI,OAAO,EAAE;gBACb,UAAU,UAAU,EAAE;gBACtB,QAAQ;gBACR,cAAc,YAAY,MAAM,CAAC,SAAS,CAAC,GAAG;gBAC9C,iBAAiB,OAAO,QAAQ;gBAChC,QAAQ,YAAY,MAAM;gBAC1B,WAAW,IAAI,OAAO,WAAW;YACnC;YAEA,OAAO;gBAAE,SAAS;gBAAM,MAAM;oBAAE,GAAG,MAAM;oBAAE,YAAY,OAAO,EAAE;gBAAC;YAAE;QAErE,EAAE,OAAO,SAAc;YACrB,QAAQ,KAAK,CAAC,uCAAuC;YACrD,mGAAmG;YACnG,MAAM,eAAe,QAAQ,OAAO,IAAI;YACxC,uDAAuD;YACvD,OAAO;gBAAE,SAAS;gBAAM,MAAM;oBAAE,GAAG,MAAM;oBAAE,YAAY;gBAAG;YAAE;QAC9D;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,6BAA6B,EAAE,cAAc;QAAC;IACjF;AACF;;;IAxDsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":["file:///E:/PROJECTS/ai%20projects/scientisto/Scientisto-/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {handleGeneration as '40161bee18a8da79c483ca285b5be32b8a62bb904e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///E:/PROJECTS/ai%20projects/scientisto/Scientisto-/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":["file:///E:/PROJECTS/ai%20projects/scientisto/Scientisto-/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}